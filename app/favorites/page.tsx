"use client"

import { useState, useEffect } from "react"
import { DashboardLayout } from "@/components/layout"
import { ListLayout } from "@/components/ui/list-layout"
import { CardItem } from "@/components/ui/card-item"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { MapPin, Bed, Bath, Square, Heart, FileDown } from "lucide-react"
import { useRouter } from "next/navigation"
import jsPDF from "jspdf"

interface MLSProperty {
  ListingKey: string
  UnparsedAddress: string
  City: string
  StateOrProvince: string
  PostalCode: string
  ListPrice: number
  BedroomsTotal: number
  BathroomsTotalInteger: number
  LivingArea: number
  PropertyType: string
  StandardStatus: string
}

export default function FavoritesPage() {
  const router = useRouter()
  const [favorites, setFavorites] = useState<MLSProperty[]>([])
  const [generatingPDF, setGeneratingPDF] = useState<string | null>(null)

  useEffect(() => {
    const savedFavorites = localStorage.getItem("favorites")
    if (savedFavorites) {
      setFavorites(JSON.parse(savedFavorites))
    }
  }, [])

  const removeFavorite = (listingKey: string) => {
    const updatedFavorites = favorites.filter(property => property.ListingKey !== listingKey)
    setFavorites(updatedFavorites)
    localStorage.setItem("favorites", JSON.stringify(updatedFavorites))
  }

  const generatePDF = async (property: MLSProperty) => {
    try {
      setGeneratingPDF(property.ListingKey)
      const doc = new jsPDF()
      
      // Add title and logo
      doc.setFontSize(24)
      doc.setTextColor(220, 38, 38) // Red color for branding
      doc.text("Property Report", 20, 20)
      
      // Add property header
      doc.setFontSize(18)
      doc.setTextColor(0, 0, 0)
      doc.text(property.UnparsedAddress, 20, 35)
      
      // Add location details
      doc.setFontSize(12)
      doc.setTextColor(100, 100, 100)
      doc.text([
        property.City,
        property.StateOrProvince,
        property.PostalCode
      ].filter(Boolean).join(", "), 20, 45)

      // Add price and status
      doc.setFontSize(16)
      doc.setTextColor(0, 0, 0)
      doc.text(`Price: $${formatValue(property.ListPrice)}`, 20, 60)
      doc.text(`Status: ${property.StandardStatus}`, 20, 70)

      // Add property details section
      doc.setFontSize(14)
      doc.text("Property Details", 20, 90)
      
      // Add details in a structured format
      doc.setFontSize(12)
      const details = [
        `Property Type: ${property.PropertyType}`,
        `Bedrooms: ${formatValue(property.BedroomsTotal)}`,
        `Bathrooms: ${formatValue(property.BathroomsTotalInteger)}`,
        `Living Area: ${formatValue(property.LivingArea)} sqft`
      ]

      details.forEach((detail, index) => {
        doc.text(detail, 25, 105 + (index * 10))
      })

      // Add footer
      doc.setFontSize(10)
      doc.setTextColor(150, 150, 150)
      const footerText = "Generated by Get Home Realty MLS System"
      const footerWidth = doc.getStringUnitWidth(footerText) * 10
      const pageWidth = doc.internal.pageSize.width
      doc.text(footerText, (pageWidth - footerWidth) / 2, 280)

      // Save the PDF
      doc.save(`property-${property.ListingKey}.pdf`)
    } catch (error) {
      console.error("Error generating PDF:", error)
    } finally {
      setGeneratingPDF(null)
    }
  }

  const formatValue = (value: any) => {
    if (value === null || value === undefined) return 'N/A'
    if (typeof value === 'number') return value.toLocaleString()
    if (typeof value === 'boolean') return value ? 'Yes' : 'No'
    return value
  }

  return (
    <DashboardLayout>
      <ListLayout
        title="Favorite Properties"
        description="Your saved MLS property listings"
      >
        {favorites.length === 0 ? (
          <div className="text-center py-12">
            <p className="text-muted-foreground mb-4">No favorite properties yet.</p>
            <Button
              onClick={() => router.push("/mls")}
            >
              Browse MLS Listings
            </Button>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
            {favorites.map((property) => (
              <CardItem
                key={property.ListingKey}
                onClick={() => router.push(`/mls/${property.ListingKey}`)}
                header={
                  <div className="flex items-start justify-between gap-2">
                    <h3 className="font-semibold truncate">
                      ${formatValue(property.ListPrice)}
                    </h3>
                    <Badge>
                      {property.StandardStatus || 'Unknown'}
                    </Badge>
                  </div>
                }
                footer={
                  <div className="flex items-center gap-2">
                    <Button 
                      variant="outline" 
                      className="flex-1"
                      onClick={(e) => {
                        e.stopPropagation()
                        router.push(`/mls/${property.ListingKey}`)
                      }}
                    >
                      View Details
                    </Button>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={(e) => {
                        e.stopPropagation()
                        generatePDF(property)
                      }}
                      disabled={generatingPDF === property.ListingKey}
                    >
                      <FileDown className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={(e) => {
                        e.stopPropagation()
                        removeFavorite(property.ListingKey)
                      }}
                    >
                      <Heart className="h-4 w-4 fill-current" />
                    </Button>
                  </div>
                }
              >
                <div className="space-y-2">
                  <div className="flex items-start gap-2">
                    <MapPin className="h-4 w-4 flex-shrink-0 mt-1" />
                    <div className="text-sm">
                      <div className="font-medium">{property.UnparsedAddress || 'No Address'}</div>
                      <div className="text-muted-foreground">
                        {[property.City, property.StateOrProvince, property.PostalCode]
                          .filter(Boolean)
                          .join(', ')}
                      </div>
                    </div>
                  </div>
                  <div className="grid grid-cols-3 gap-2 text-sm">
                    <div className="flex items-center gap-1">
                      <Bed className="h-4 w-4" />
                      <span>{formatValue(property.BedroomsTotal)} bd</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <Bath className="h-4 w-4" />
                      <span>{formatValue(property.BathroomsTotalInteger)} ba</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <Square className="h-4 w-4" />
                      <span>{formatValue(property.LivingArea)} sqft</span>
                    </div>
                  </div>
                </div>
              </CardItem>
            ))}
          </div>
        )}
      </ListLayout>
    </DashboardLayout>
  )
}

